# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Post {
  id: ID!
  title: String
  slug: String
  author(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  authorCount(where: UserWhereInput! = {}): Int
  published: Boolean
  publishedDate: DateTime
  editedDate: DateTime
  role: PostRoleType
  content: Post_content_Document
  intro: String
  event: Event
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

enum PostRoleType {
  public
  runner
  staff
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
  slug: String
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  author: UserManyRelationFilter
  published: BooleanFilter
  publishedDate: DateTimeNullableFilter
  editedDate: DateTimeNullableFilter
  role: PostRoleTypeNullableFilter
  intro: StringFilter
  event: EventWhereInput
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input PostRoleTypeNullableFilter {
  equals: PostRoleType
  in: [PostRoleType!]
  notIn: [PostRoleType!]
  not: PostRoleTypeNullableFilter
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  published: OrderDirection
  publishedDate: OrderDirection
  editedDate: OrderDirection
  role: OrderDirection
  intro: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input PostUpdateInput {
  title: String
  slug: String
  author: UserRelateToManyForUpdateInput
  published: Boolean
  publishedDate: DateTime
  editedDate: DateTime
  role: PostRoleType
  content: JSON
  intro: String
  event: EventRelateToOneForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input EventRelateToOneForUpdateInput {
  create: EventCreateInput
  connect: EventWhereUniqueInput
  disconnect: Boolean
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  slug: String
  author: UserRelateToManyForCreateInput
  published: Boolean
  publishedDate: DateTime
  editedDate: DateTime
  role: PostRoleType
  content: JSON
  intro: String
  event: EventRelateToOneForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input EventRelateToOneForCreateInput {
  create: EventCreateInput
  connect: EventWhereUniqueInput
}

type User {
  id: ID!
  name: String
  username: String
  email: String
  password: PasswordState
  accountCreated: DateTime
  dateOfBirth: DateTime
  pronouns: String
  submissions(where: SubmissionWhereInput! = {}, orderBy: [SubmissionOrderByInput!]! = [], take: Int, skip: Int! = 0): [Submission!]
  submissionsCount(where: SubmissionWhereInput! = {}): Int
  roles(where: RoleWhereInput! = {}, orderBy: [RoleOrderByInput!]! = [], take: Int, skip: Int! = 0): [Role!]
  rolesCount(where: RoleWhereInput! = {}): Int
  runs(where: RunWhereInput! = {}, orderBy: [RunOrderByInput!]! = [], take: Int, skip: Int! = 0): [Run!]
  runsCount(where: RunWhereInput! = {}): Int
  verified: Boolean
  state: UserStateType
  sentVerification: DateTime
  discord: String
  twitter: String
  twitch: String
  tickets(where: TicketWhereInput! = {}, orderBy: [TicketOrderByInput!]! = [], take: Int, skip: Int! = 0): [Ticket!]
  ticketsCount(where: TicketWhereInput! = {}): Int
  volunteer(where: VolunteerWhereInput! = {}, orderBy: [VolunteerOrderByInput!]! = [], take: Int, skip: Int! = 0): [Volunteer!]
  volunteerCount(where: VolunteerWhereInput! = {}): Int
  shirts(where: ShirtOrderWhereInput! = {}, orderBy: [ShirtOrderOrderByInput!]! = [], take: Int, skip: Int! = 0): [ShirtOrder!]
  shirtsCount(where: ShirtOrderWhereInput! = {}): Int
  passwordResetToken: PasswordState
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

enum UserStateType {
  none
  vic
  nsw
  qld
  sa
  wa
  act
  nt
  tas
  outer
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  username: StringFilter
  email: StringFilter
  accountCreated: DateTimeNullableFilter
  dateOfBirth: DateTimeNullableFilter
  pronouns: StringFilter
  submissions: SubmissionManyRelationFilter
  roles: RoleManyRelationFilter
  runs: RunManyRelationFilter
  verified: BooleanFilter
  state: UserStateTypeNullableFilter
  sentVerification: DateTimeNullableFilter
  discord: StringFilter
  twitter: StringFilter
  twitch: StringFilter
  tickets: TicketManyRelationFilter
  volunteer: VolunteerManyRelationFilter
  shirts: ShirtOrderManyRelationFilter
  passwordResetToken: PasswordFilter
  passwordResetIssuedAt: DateTimeNullableFilter
  passwordResetRedeemedAt: DateTimeNullableFilter
}

input SubmissionManyRelationFilter {
  every: SubmissionWhereInput
  some: SubmissionWhereInput
  none: SubmissionWhereInput
}

input RoleManyRelationFilter {
  every: RoleWhereInput
  some: RoleWhereInput
  none: RoleWhereInput
}

input RunManyRelationFilter {
  every: RunWhereInput
  some: RunWhereInput
  none: RunWhereInput
}

input UserStateTypeNullableFilter {
  equals: UserStateType
  in: [UserStateType!]
  notIn: [UserStateType!]
  not: UserStateTypeNullableFilter
}

input TicketManyRelationFilter {
  every: TicketWhereInput
  some: TicketWhereInput
  none: TicketWhereInput
}

input VolunteerManyRelationFilter {
  every: VolunteerWhereInput
  some: VolunteerWhereInput
  none: VolunteerWhereInput
}

input ShirtOrderManyRelationFilter {
  every: ShirtOrderWhereInput
  some: ShirtOrderWhereInput
  none: ShirtOrderWhereInput
}

input PasswordFilter {
  isSet: Boolean!
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  username: OrderDirection
  email: OrderDirection
  accountCreated: OrderDirection
  dateOfBirth: OrderDirection
  pronouns: OrderDirection
  verified: OrderDirection
  state: OrderDirection
  sentVerification: OrderDirection
  discord: OrderDirection
  twitter: OrderDirection
  twitch: OrderDirection
  passwordResetIssuedAt: OrderDirection
  passwordResetRedeemedAt: OrderDirection
}

input UserUpdateInput {
  name: String
  username: String
  email: String
  password: String
  accountCreated: DateTime
  dateOfBirth: DateTime
  pronouns: String
  submissions: SubmissionRelateToManyForUpdateInput
  roles: RoleRelateToManyForUpdateInput
  runs: RunRelateToManyForUpdateInput
  verified: Boolean
  state: UserStateType
  sentVerification: DateTime
  discord: String
  twitter: String
  twitch: String
  tickets: TicketRelateToManyForUpdateInput
  volunteer: VolunteerRelateToManyForUpdateInput
  shirts: ShirtOrderRelateToManyForUpdateInput
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input SubmissionRelateToManyForUpdateInput {
  disconnect: [SubmissionWhereUniqueInput!]
  set: [SubmissionWhereUniqueInput!]
  create: [SubmissionCreateInput!]
  connect: [SubmissionWhereUniqueInput!]
}

input RoleRelateToManyForUpdateInput {
  disconnect: [RoleWhereUniqueInput!]
  set: [RoleWhereUniqueInput!]
  create: [RoleCreateInput!]
  connect: [RoleWhereUniqueInput!]
}

input RunRelateToManyForUpdateInput {
  disconnect: [RunWhereUniqueInput!]
  set: [RunWhereUniqueInput!]
  create: [RunCreateInput!]
  connect: [RunWhereUniqueInput!]
}

input TicketRelateToManyForUpdateInput {
  disconnect: [TicketWhereUniqueInput!]
  set: [TicketWhereUniqueInput!]
  create: [TicketCreateInput!]
  connect: [TicketWhereUniqueInput!]
}

input VolunteerRelateToManyForUpdateInput {
  disconnect: [VolunteerWhereUniqueInput!]
  set: [VolunteerWhereUniqueInput!]
  create: [VolunteerCreateInput!]
  connect: [VolunteerWhereUniqueInput!]
}

input ShirtOrderRelateToManyForUpdateInput {
  disconnect: [ShirtOrderWhereUniqueInput!]
  set: [ShirtOrderWhereUniqueInput!]
  create: [ShirtOrderCreateInput!]
  connect: [ShirtOrderWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  username: String
  email: String
  password: String
  accountCreated: DateTime
  dateOfBirth: DateTime
  pronouns: String
  submissions: SubmissionRelateToManyForCreateInput
  roles: RoleRelateToManyForCreateInput
  runs: RunRelateToManyForCreateInput
  verified: Boolean
  state: UserStateType
  sentVerification: DateTime
  discord: String
  twitter: String
  twitch: String
  tickets: TicketRelateToManyForCreateInput
  volunteer: VolunteerRelateToManyForCreateInput
  shirts: ShirtOrderRelateToManyForCreateInput
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input SubmissionRelateToManyForCreateInput {
  create: [SubmissionCreateInput!]
  connect: [SubmissionWhereUniqueInput!]
}

input RoleRelateToManyForCreateInput {
  create: [RoleCreateInput!]
  connect: [RoleWhereUniqueInput!]
}

input RunRelateToManyForCreateInput {
  create: [RunCreateInput!]
  connect: [RunWhereUniqueInput!]
}

input TicketRelateToManyForCreateInput {
  create: [TicketCreateInput!]
  connect: [TicketWhereUniqueInput!]
}

input VolunteerRelateToManyForCreateInput {
  create: [VolunteerCreateInput!]
  connect: [VolunteerWhereUniqueInput!]
}

input ShirtOrderRelateToManyForCreateInput {
  create: [ShirtOrderCreateInput!]
  connect: [ShirtOrderWhereUniqueInput!]
}

type Submission {
  id: ID!
  runner: User
  created: DateTime
  game: String
  category: String
  platform: String
  estimate: String
  ageRating: SubmissionAgeRatingType
  donationIncentive: String
  specialReqs: String
  availability: JSON
  race: SubmissionRaceType
  racer: String
  coop: Boolean
  video: String
  status: SubmissionStatusType
  event: Event
  willingBackup: Boolean
}

enum SubmissionAgeRatingType {
  m_or_lower
  ma15
  ra18
}

enum SubmissionRaceType {
  no
  solo
  only
}

enum SubmissionStatusType {
  submitted
  accepted
  backup
  rejected
}

input SubmissionWhereUniqueInput {
  id: ID
}

input SubmissionWhereInput {
  AND: [SubmissionWhereInput!]
  OR: [SubmissionWhereInput!]
  NOT: [SubmissionWhereInput!]
  id: IDFilter
  runner: UserWhereInput
  created: DateTimeNullableFilter
  game: StringFilter
  category: StringFilter
  platform: StringFilter
  estimate: StringFilter
  ageRating: SubmissionAgeRatingTypeNullableFilter
  donationIncentive: StringFilter
  specialReqs: StringFilter
  race: SubmissionRaceTypeNullableFilter
  racer: StringFilter
  coop: BooleanFilter
  video: StringFilter
  status: SubmissionStatusTypeNullableFilter
  event: EventWhereInput
  willingBackup: BooleanFilter
}

input SubmissionAgeRatingTypeNullableFilter {
  equals: SubmissionAgeRatingType
  in: [SubmissionAgeRatingType!]
  notIn: [SubmissionAgeRatingType!]
  not: SubmissionAgeRatingTypeNullableFilter
}

input SubmissionRaceTypeNullableFilter {
  equals: SubmissionRaceType
  in: [SubmissionRaceType!]
  notIn: [SubmissionRaceType!]
  not: SubmissionRaceTypeNullableFilter
}

input SubmissionStatusTypeNullableFilter {
  equals: SubmissionStatusType
  in: [SubmissionStatusType!]
  notIn: [SubmissionStatusType!]
  not: SubmissionStatusTypeNullableFilter
}

input SubmissionOrderByInput {
  id: OrderDirection
  created: OrderDirection
  game: OrderDirection
  category: OrderDirection
  platform: OrderDirection
  estimate: OrderDirection
  ageRating: OrderDirection
  donationIncentive: OrderDirection
  specialReqs: OrderDirection
  race: OrderDirection
  racer: OrderDirection
  coop: OrderDirection
  video: OrderDirection
  status: OrderDirection
  willingBackup: OrderDirection
}

input SubmissionUpdateInput {
  runner: UserRelateToOneForUpdateInput
  created: DateTime
  game: String
  category: String
  platform: String
  estimate: String
  ageRating: SubmissionAgeRatingType
  donationIncentive: String
  specialReqs: String
  availability: JSON
  race: SubmissionRaceType
  racer: String
  coop: Boolean
  video: String
  status: SubmissionStatusType
  event: EventRelateToOneForUpdateInput
  willingBackup: Boolean
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input SubmissionUpdateArgs {
  where: SubmissionWhereUniqueInput!
  data: SubmissionUpdateInput!
}

input SubmissionCreateInput {
  runner: UserRelateToOneForCreateInput
  created: DateTime
  game: String
  category: String
  platform: String
  estimate: String
  ageRating: SubmissionAgeRatingType
  donationIncentive: String
  specialReqs: String
  availability: JSON
  race: SubmissionRaceType
  racer: String
  coop: Boolean
  video: String
  status: SubmissionStatusType
  event: EventRelateToOneForCreateInput
  willingBackup: Boolean
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Event {
  id: ID!
  name: String
  shortname: String
  published: Boolean
  acceptingSubmissions: Boolean
  acceptingTickets: Boolean
  scheduleReleased: Boolean
  acceptingVolunteers: Boolean
  acceptingBackups: Boolean
  acceptingShirts: Boolean
  eventTimezone: String
  startDate: DateTime
  endDate: DateTime
  raised: Float
  postEventPage: Event_postEventPage_Document
  submissions(where: SubmissionWhereInput! = {}, orderBy: [SubmissionOrderByInput!]! = [], take: Int, skip: Int! = 0): [Submission!]
  submissionsCount(where: SubmissionWhereInput! = {}): Int
  runs(where: RunWhereInput! = {}, orderBy: [RunOrderByInput!]! = [], take: Int, skip: Int! = 0): [Run!]
  runsCount(where: RunWhereInput! = {}): Int
  tickets(where: TicketWhereInput! = {}, orderBy: [TicketOrderByInput!]! = [], take: Int, skip: Int! = 0): [Ticket!]
  ticketsCount(where: TicketWhereInput! = {}): Int
  volunteer(where: VolunteerWhereInput! = {}, orderBy: [VolunteerOrderByInput!]! = [], take: Int, skip: Int! = 0): [Volunteer!]
  volunteerCount(where: VolunteerWhereInput! = {}): Int
  donationIncentives(where: IncentiveWhereInput! = {}, orderBy: [IncentiveOrderByInput!]! = [], take: Int, skip: Int! = 0): [Incentive!]
  donationIncentivesCount(where: IncentiveWhereInput! = {}): Int
  logo: AzureStorageImageFieldOutput
  darkModeLogo: AzureStorageImageFieldOutput
  heroImage: AzureStorageImageFieldOutput
  ogImage: AzureStorageImageFieldOutput
  postEventBackground: AzureStorageImageFieldOutput
  pressKit: AzureStorageFileFieldOutput
  submissionInstructions: Event_submissionInstructions_Document
  eventPage: Event_eventPage_Document
}

type Event_postEventPage_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

interface AzureStorageImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: AzureStorageImageExtension!
  ref: String!
  url: String!
}

enum AzureStorageImageExtension {
  jpg
  png
  webp
  gif
}

interface AzureStorageFileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

type Event_submissionInstructions_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Event_eventPage_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input EventWhereUniqueInput {
  id: ID
  shortname: String
}

type AzureStorageImageFieldOutputType implements AzureStorageImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: AzureStorageImageExtension!
  ref: String!
  url: String!
}

type AzureStorageFileFieldOutputType implements AzureStorageFileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

input EventWhereInput {
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
  id: IDFilter
  name: StringFilter
  shortname: StringFilter
  published: BooleanFilter
  acceptingSubmissions: BooleanFilter
  acceptingTickets: BooleanFilter
  scheduleReleased: BooleanFilter
  acceptingVolunteers: BooleanFilter
  acceptingBackups: BooleanFilter
  acceptingShirts: BooleanFilter
  eventTimezone: StringFilter
  startDate: DateTimeNullableFilter
  endDate: DateTimeNullableFilter
  raised: FloatNullableFilter
  submissions: SubmissionManyRelationFilter
  runs: RunManyRelationFilter
  tickets: TicketManyRelationFilter
  volunteer: VolunteerManyRelationFilter
  donationIncentives: IncentiveManyRelationFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input IncentiveManyRelationFilter {
  every: IncentiveWhereInput
  some: IncentiveWhereInput
  none: IncentiveWhereInput
}

input EventOrderByInput {
  id: OrderDirection
  name: OrderDirection
  shortname: OrderDirection
  published: OrderDirection
  acceptingSubmissions: OrderDirection
  acceptingTickets: OrderDirection
  scheduleReleased: OrderDirection
  acceptingVolunteers: OrderDirection
  acceptingBackups: OrderDirection
  acceptingShirts: OrderDirection
  eventTimezone: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
  raised: OrderDirection
}

input EventUpdateInput {
  name: String
  shortname: String
  published: Boolean
  acceptingSubmissions: Boolean
  acceptingTickets: Boolean
  scheduleReleased: Boolean
  acceptingVolunteers: Boolean
  acceptingBackups: Boolean
  acceptingShirts: Boolean
  eventTimezone: String
  startDate: DateTime
  endDate: DateTime
  raised: Float
  postEventPage: JSON
  submissions: SubmissionRelateToManyForUpdateInput
  runs: RunRelateToManyForUpdateInput
  tickets: TicketRelateToManyForUpdateInput
  volunteer: VolunteerRelateToManyForUpdateInput
  donationIncentives: IncentiveRelateToManyForUpdateInput
  logo: AzureStorageImageFieldInput
  darkModeLogo: AzureStorageImageFieldInput
  heroImage: AzureStorageImageFieldInput
  ogImage: AzureStorageImageFieldInput
  postEventBackground: AzureStorageImageFieldInput
  pressKit: AzureStorageFileFieldInput
  submissionInstructions: JSON
  eventPage: JSON
}

input IncentiveRelateToManyForUpdateInput {
  disconnect: [IncentiveWhereUniqueInput!]
  set: [IncentiveWhereUniqueInput!]
  create: [IncentiveCreateInput!]
  connect: [IncentiveWhereUniqueInput!]
}

input AzureStorageImageFieldInput {
  upload: Upload
  ref: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input AzureStorageFileFieldInput {
  upload: Upload
  ref: String
}

input EventUpdateArgs {
  where: EventWhereUniqueInput!
  data: EventUpdateInput!
}

input EventCreateInput {
  name: String
  shortname: String
  published: Boolean
  acceptingSubmissions: Boolean
  acceptingTickets: Boolean
  scheduleReleased: Boolean
  acceptingVolunteers: Boolean
  acceptingBackups: Boolean
  acceptingShirts: Boolean
  eventTimezone: String
  startDate: DateTime
  endDate: DateTime
  raised: Float
  postEventPage: JSON
  submissions: SubmissionRelateToManyForCreateInput
  runs: RunRelateToManyForCreateInput
  tickets: TicketRelateToManyForCreateInput
  volunteer: VolunteerRelateToManyForCreateInput
  donationIncentives: IncentiveRelateToManyForCreateInput
  logo: AzureStorageImageFieldInput
  darkModeLogo: AzureStorageImageFieldInput
  heroImage: AzureStorageImageFieldInput
  ogImage: AzureStorageImageFieldInput
  postEventBackground: AzureStorageImageFieldInput
  pressKit: AzureStorageFileFieldInput
  submissionInstructions: JSON
  eventPage: JSON
}

input IncentiveRelateToManyForCreateInput {
  create: [IncentiveCreateInput!]
  connect: [IncentiveWhereUniqueInput!]
}

type Role {
  id: ID!
  name: String
  admin: Boolean
  canManageContent: Boolean
  canManageUsers: Boolean
  runner: Boolean
  volunteer: Boolean
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  event: Event
  show: Boolean
  colour: String
  textColour: RoleTextColourType
}

enum RoleTextColourType {
  white
  black
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringFilter
  admin: BooleanFilter
  canManageContent: BooleanFilter
  canManageUsers: BooleanFilter
  runner: BooleanFilter
  volunteer: BooleanFilter
  users: UserManyRelationFilter
  event: EventWhereInput
  show: BooleanFilter
  colour: StringFilter
  textColour: RoleTextColourTypeNullableFilter
}

input RoleTextColourTypeNullableFilter {
  equals: RoleTextColourType
  in: [RoleTextColourType!]
  notIn: [RoleTextColourType!]
  not: RoleTextColourTypeNullableFilter
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  admin: OrderDirection
  canManageContent: OrderDirection
  canManageUsers: OrderDirection
  runner: OrderDirection
  volunteer: OrderDirection
  show: OrderDirection
  colour: OrderDirection
  textColour: OrderDirection
}

input RoleUpdateInput {
  name: String
  admin: Boolean
  canManageContent: Boolean
  canManageUsers: Boolean
  runner: Boolean
  volunteer: Boolean
  users: UserRelateToManyForUpdateInput
  event: EventRelateToOneForUpdateInput
  show: Boolean
  colour: String
  textColour: RoleTextColourType
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  admin: Boolean
  canManageContent: Boolean
  canManageUsers: Boolean
  runner: Boolean
  volunteer: Boolean
  users: UserRelateToManyForCreateInput
  event: EventRelateToOneForCreateInput
  show: Boolean
  colour: String
  textColour: RoleTextColourType
}

type Run {
  id: ID!
  runners(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  runnersCount(where: UserWhereInput! = {}): Int
  originalSubmission: Submission
  game: String
  category: String
  platform: String
  estimate: String
  finalTime: String
  donationIncentive: String
  race: Boolean
  racer: String
  coop: Boolean
  twitchVOD: String
  youtubeVOD: String
  event: Event
  donationIncentiveObject(where: IncentiveWhereInput! = {}, orderBy: [IncentiveOrderByInput!]! = [], take: Int, skip: Int! = 0): [Incentive!]
  donationIncentiveObjectCount(where: IncentiveWhereInput! = {}): Int
  scheduledTime: DateTime
}

input RunWhereUniqueInput {
  id: ID
}

input RunWhereInput {
  AND: [RunWhereInput!]
  OR: [RunWhereInput!]
  NOT: [RunWhereInput!]
  id: IDFilter
  runners: UserManyRelationFilter
  originalSubmission: SubmissionWhereInput
  game: StringFilter
  category: StringFilter
  platform: StringFilter
  estimate: StringFilter
  finalTime: StringFilter
  donationIncentive: StringFilter
  race: BooleanFilter
  racer: StringFilter
  coop: BooleanFilter
  twitchVOD: StringFilter
  youtubeVOD: StringFilter
  event: EventWhereInput
  donationIncentiveObject: IncentiveManyRelationFilter
  scheduledTime: DateTimeNullableFilter
}

input RunOrderByInput {
  id: OrderDirection
  game: OrderDirection
  category: OrderDirection
  platform: OrderDirection
  estimate: OrderDirection
  finalTime: OrderDirection
  donationIncentive: OrderDirection
  race: OrderDirection
  racer: OrderDirection
  coop: OrderDirection
  twitchVOD: OrderDirection
  youtubeVOD: OrderDirection
  scheduledTime: OrderDirection
}

input RunUpdateInput {
  runners: UserRelateToManyForUpdateInput
  originalSubmission: SubmissionRelateToOneForUpdateInput
  game: String
  category: String
  platform: String
  estimate: String
  finalTime: String
  donationIncentive: String
  race: Boolean
  racer: String
  coop: Boolean
  twitchVOD: String
  youtubeVOD: String
  event: EventRelateToOneForUpdateInput
  donationIncentiveObject: IncentiveRelateToManyForUpdateInput
  scheduledTime: DateTime
}

input SubmissionRelateToOneForUpdateInput {
  create: SubmissionCreateInput
  connect: SubmissionWhereUniqueInput
  disconnect: Boolean
}

input RunUpdateArgs {
  where: RunWhereUniqueInput!
  data: RunUpdateInput!
}

input RunCreateInput {
  runners: UserRelateToManyForCreateInput
  originalSubmission: SubmissionRelateToOneForCreateInput
  game: String
  category: String
  platform: String
  estimate: String
  finalTime: String
  donationIncentive: String
  race: Boolean
  racer: String
  coop: Boolean
  twitchVOD: String
  youtubeVOD: String
  event: EventRelateToOneForCreateInput
  donationIncentiveObject: IncentiveRelateToManyForCreateInput
  scheduledTime: DateTime
}

input SubmissionRelateToOneForCreateInput {
  create: SubmissionCreateInput
  connect: SubmissionWhereUniqueInput
}

type Verification {
  id: ID!
  code: String
  account: String
}

input VerificationWhereUniqueInput {
  id: ID
  code: String
}

input VerificationUpdateInput {
  code: String
  account: String
}

input VerificationUpdateArgs {
  where: VerificationWhereUniqueInput!
  data: VerificationUpdateInput!
}

input VerificationCreateInput {
  code: String
  account: String
}

type Ticket {
  id: ID!
  user: User
  event: Event
  taken: Boolean
  method: TicketMethodType
  ticketID: String
  paid: Boolean
  notes: String
  numberOfTickets: Int
  totalCost: Float
  stripeID: String
  created: DateTime
}

enum TicketMethodType {
  bank
  stripe
}

input TicketWhereUniqueInput {
  id: ID
  ticketID: String
  stripeID: String
}

input TicketWhereInput {
  AND: [TicketWhereInput!]
  OR: [TicketWhereInput!]
  NOT: [TicketWhereInput!]
  id: IDFilter
  user: UserWhereInput
  event: EventWhereInput
  taken: BooleanFilter
  method: TicketMethodTypeNullableFilter
  ticketID: StringFilter
  paid: BooleanFilter
  notes: StringFilter
  numberOfTickets: IntNullableFilter
  stripeID: StringFilter
  created: DateTimeNullableFilter
}

input TicketMethodTypeNullableFilter {
  equals: TicketMethodType
  in: [TicketMethodType!]
  notIn: [TicketMethodType!]
  not: TicketMethodTypeNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input TicketOrderByInput {
  id: OrderDirection
  taken: OrderDirection
  method: OrderDirection
  ticketID: OrderDirection
  paid: OrderDirection
  notes: OrderDirection
  numberOfTickets: OrderDirection
  stripeID: OrderDirection
  created: OrderDirection
}

input TicketUpdateInput {
  user: UserRelateToOneForUpdateInput
  event: EventRelateToOneForUpdateInput
  taken: Boolean
  method: TicketMethodType
  ticketID: String
  paid: Boolean
  notes: String
  numberOfTickets: Int
  stripeID: String
  created: DateTime
}

input TicketUpdateArgs {
  where: TicketWhereUniqueInput!
  data: TicketUpdateInput!
}

input TicketCreateInput {
  user: UserRelateToOneForCreateInput
  event: EventRelateToOneForCreateInput
  taken: Boolean
  method: TicketMethodType
  ticketID: String
  paid: Boolean
  notes: String
  numberOfTickets: Int
  stripeID: String
  created: DateTime
}

type Volunteer {
  id: ID!
  volunteer: User
  jobType: VolunteerJobTypeType
  eventHostTime: Int
  maxDailyHostTime: Int
  dayTimes: JSON
  specificGame: String
  specificRunner: String
  additionalInfo: String
  experience: String
  favMeme: String
  runnerManagementAvailability: String
  techAvailablity: String
  techExperience: String
  event: Event
}

enum VolunteerJobTypeType {
  host
  social
  runMgmt
  tech
}

input VolunteerWhereUniqueInput {
  id: ID
}

input VolunteerWhereInput {
  AND: [VolunteerWhereInput!]
  OR: [VolunteerWhereInput!]
  NOT: [VolunteerWhereInput!]
  id: IDFilter
  volunteer: UserWhereInput
  jobType: VolunteerJobTypeTypeNullableFilter
  eventHostTime: IntNullableFilter
  maxDailyHostTime: IntNullableFilter
  specificGame: StringFilter
  specificRunner: StringFilter
  additionalInfo: StringFilter
  experience: StringFilter
  favMeme: StringFilter
  runnerManagementAvailability: StringFilter
  techAvailablity: StringFilter
  techExperience: StringFilter
  event: EventWhereInput
}

input VolunteerJobTypeTypeNullableFilter {
  equals: VolunteerJobTypeType
  in: [VolunteerJobTypeType!]
  notIn: [VolunteerJobTypeType!]
  not: VolunteerJobTypeTypeNullableFilter
}

input VolunteerOrderByInput {
  id: OrderDirection
  jobType: OrderDirection
  eventHostTime: OrderDirection
  maxDailyHostTime: OrderDirection
  specificGame: OrderDirection
  specificRunner: OrderDirection
  additionalInfo: OrderDirection
  experience: OrderDirection
  favMeme: OrderDirection
  runnerManagementAvailability: OrderDirection
  techAvailablity: OrderDirection
  techExperience: OrderDirection
}

input VolunteerUpdateInput {
  volunteer: UserRelateToOneForUpdateInput
  jobType: VolunteerJobTypeType
  eventHostTime: Int
  maxDailyHostTime: Int
  dayTimes: JSON
  specificGame: String
  specificRunner: String
  additionalInfo: String
  experience: String
  favMeme: String
  runnerManagementAvailability: String
  techAvailablity: String
  techExperience: String
  event: EventRelateToOneForUpdateInput
}

input VolunteerUpdateArgs {
  where: VolunteerWhereUniqueInput!
  data: VolunteerUpdateInput!
}

input VolunteerCreateInput {
  volunteer: UserRelateToOneForCreateInput
  jobType: VolunteerJobTypeType
  eventHostTime: Int
  maxDailyHostTime: Int
  dayTimes: JSON
  specificGame: String
  specificRunner: String
  additionalInfo: String
  experience: String
  favMeme: String
  runnerManagementAvailability: String
  techAvailablity: String
  techExperience: String
  event: EventRelateToOneForCreateInput
}

type ShirtOrder {
  id: ID!
  user: User
  taken: Boolean
  method: ShirtOrderMethodType
  shirtID: String
  paid: Boolean
  notes: String
  size: ShirtOrderSizeType
  colour: ShirtOrderColourType
  stripeID: String
  created: DateTime
}

enum ShirtOrderMethodType {
  bank
  stripe
}

enum ShirtOrderSizeType {
  xs
  s
  m
  l
  xl
  xl2
  xl3
}

enum ShirtOrderColourType {
  blue
  purple
}

input ShirtOrderWhereUniqueInput {
  id: ID
  shirtID: String
  stripeID: String
}

input ShirtOrderWhereInput {
  AND: [ShirtOrderWhereInput!]
  OR: [ShirtOrderWhereInput!]
  NOT: [ShirtOrderWhereInput!]
  id: IDFilter
  user: UserWhereInput
  taken: BooleanFilter
  method: ShirtOrderMethodTypeNullableFilter
  shirtID: StringFilter
  paid: BooleanFilter
  notes: StringFilter
  size: ShirtOrderSizeTypeNullableFilter
  colour: ShirtOrderColourTypeNullableFilter
  stripeID: StringFilter
  created: DateTimeNullableFilter
}

input ShirtOrderMethodTypeNullableFilter {
  equals: ShirtOrderMethodType
  in: [ShirtOrderMethodType!]
  notIn: [ShirtOrderMethodType!]
  not: ShirtOrderMethodTypeNullableFilter
}

input ShirtOrderSizeTypeNullableFilter {
  equals: ShirtOrderSizeType
  in: [ShirtOrderSizeType!]
  notIn: [ShirtOrderSizeType!]
  not: ShirtOrderSizeTypeNullableFilter
}

input ShirtOrderColourTypeNullableFilter {
  equals: ShirtOrderColourType
  in: [ShirtOrderColourType!]
  notIn: [ShirtOrderColourType!]
  not: ShirtOrderColourTypeNullableFilter
}

input ShirtOrderOrderByInput {
  id: OrderDirection
  taken: OrderDirection
  method: OrderDirection
  shirtID: OrderDirection
  paid: OrderDirection
  notes: OrderDirection
  size: OrderDirection
  colour: OrderDirection
  stripeID: OrderDirection
  created: OrderDirection
}

input ShirtOrderUpdateInput {
  user: UserRelateToOneForUpdateInput
  taken: Boolean
  method: ShirtOrderMethodType
  shirtID: String
  paid: Boolean
  notes: String
  size: ShirtOrderSizeType
  colour: ShirtOrderColourType
  stripeID: String
  created: DateTime
}

input ShirtOrderUpdateArgs {
  where: ShirtOrderWhereUniqueInput!
  data: ShirtOrderUpdateInput!
}

input ShirtOrderCreateInput {
  user: UserRelateToOneForCreateInput
  taken: Boolean
  method: ShirtOrderMethodType
  shirtID: String
  paid: Boolean
  notes: String
  size: ShirtOrderSizeType
  colour: ShirtOrderColourType
  stripeID: String
  created: DateTime
}

type Incentive {
  id: ID!
  run: Run
  event: Event
  title: String
  notes: String
  type: String
  data: JSON
  active: Boolean
}

input IncentiveWhereUniqueInput {
  id: ID
}

input IncentiveWhereInput {
  AND: [IncentiveWhereInput!]
  OR: [IncentiveWhereInput!]
  NOT: [IncentiveWhereInput!]
  id: IDFilter
  run: RunWhereInput
  event: EventWhereInput
  title: StringFilter
  notes: StringFilter
  type: StringFilter
  active: BooleanFilter
}

input IncentiveOrderByInput {
  id: OrderDirection
  title: OrderDirection
  notes: OrderDirection
  type: OrderDirection
  active: OrderDirection
}

input IncentiveUpdateInput {
  run: RunRelateToOneForUpdateInput
  event: EventRelateToOneForUpdateInput
  title: String
  notes: String
  type: String
  data: JSON
  active: Boolean
}

input RunRelateToOneForUpdateInput {
  create: RunCreateInput
  connect: RunWhereUniqueInput
  disconnect: Boolean
}

input IncentiveUpdateArgs {
  where: IncentiveWhereUniqueInput!
  data: IncentiveUpdateInput!
}

input IncentiveCreateInput {
  run: RunRelateToOneForCreateInput
  event: EventRelateToOneForCreateInput
  title: String
  notes: String
  type: String
  data: JSON
  active: Boolean
}

input RunRelateToOneForCreateInput {
  create: RunCreateInput
  connect: RunWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createSubmission(data: SubmissionCreateInput!): Submission
  createSubmissions(data: [SubmissionCreateInput!]!): [Submission]
  updateSubmission(where: SubmissionWhereUniqueInput!, data: SubmissionUpdateInput!): Submission
  updateSubmissions(data: [SubmissionUpdateArgs!]!): [Submission]
  deleteSubmission(where: SubmissionWhereUniqueInput!): Submission
  deleteSubmissions(where: [SubmissionWhereUniqueInput!]!): [Submission]
  createEvent(data: EventCreateInput!): Event
  createEvents(data: [EventCreateInput!]!): [Event]
  updateEvent(where: EventWhereUniqueInput!, data: EventUpdateInput!): Event
  updateEvents(data: [EventUpdateArgs!]!): [Event]
  deleteEvent(where: EventWhereUniqueInput!): Event
  deleteEvents(where: [EventWhereUniqueInput!]!): [Event]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  createRun(data: RunCreateInput!): Run
  createRuns(data: [RunCreateInput!]!): [Run]
  updateRun(where: RunWhereUniqueInput!, data: RunUpdateInput!): Run
  updateRuns(data: [RunUpdateArgs!]!): [Run]
  deleteRun(where: RunWhereUniqueInput!): Run
  deleteRuns(where: [RunWhereUniqueInput!]!): [Run]
  createVerification(data: VerificationCreateInput!): Verification
  createVerifications(data: [VerificationCreateInput!]!): [Verification]
  updateVerification(where: VerificationWhereUniqueInput!, data: VerificationUpdateInput!): Verification
  updateVerifications(data: [VerificationUpdateArgs!]!): [Verification]
  deleteVerification(where: VerificationWhereUniqueInput!): Verification
  deleteVerifications(where: [VerificationWhereUniqueInput!]!): [Verification]
  createTicket(data: TicketCreateInput!): Ticket
  createTickets(data: [TicketCreateInput!]!): [Ticket]
  updateTicket(where: TicketWhereUniqueInput!, data: TicketUpdateInput!): Ticket
  updateTickets(data: [TicketUpdateArgs!]!): [Ticket]
  deleteTicket(where: TicketWhereUniqueInput!): Ticket
  deleteTickets(where: [TicketWhereUniqueInput!]!): [Ticket]
  createVolunteer(data: VolunteerCreateInput!): Volunteer
  createVolunteers(data: [VolunteerCreateInput!]!): [Volunteer]
  updateVolunteer(where: VolunteerWhereUniqueInput!, data: VolunteerUpdateInput!): Volunteer
  updateVolunteers(data: [VolunteerUpdateArgs!]!): [Volunteer]
  deleteVolunteer(where: VolunteerWhereUniqueInput!): Volunteer
  deleteVolunteers(where: [VolunteerWhereUniqueInput!]!): [Volunteer]
  createShirtOrder(data: ShirtOrderCreateInput!): ShirtOrder
  createShirtOrders(data: [ShirtOrderCreateInput!]!): [ShirtOrder]
  updateShirtOrder(where: ShirtOrderWhereUniqueInput!, data: ShirtOrderUpdateInput!): ShirtOrder
  updateShirtOrders(data: [ShirtOrderUpdateArgs!]!): [ShirtOrder]
  deleteShirtOrder(where: ShirtOrderWhereUniqueInput!): ShirtOrder
  deleteShirtOrders(where: [ShirtOrderWhereUniqueInput!]!): [ShirtOrder]
  createIncentive(data: IncentiveCreateInput!): Incentive
  createIncentives(data: [IncentiveCreateInput!]!): [Incentive]
  updateIncentive(where: IncentiveWhereUniqueInput!, data: IncentiveUpdateInput!): Incentive
  updateIncentives(data: [IncentiveUpdateArgs!]!): [Incentive]
  deleteIncentive(where: IncentiveWhereUniqueInput!): Incentive
  deleteIncentives(where: [IncentiveWhereUniqueInput!]!): [Incentive]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
  sendUserPasswordResetLink(email: String!): Boolean!
  redeemUserPasswordResetToken(email: String!, token: String!, password: String!): RedeemUserPasswordResetTokenResult
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  username: String
  email: String
  password: String
  dateOfBirth: DateTime
}

type RedeemUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

type Query {
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  submissions(where: SubmissionWhereInput! = {}, orderBy: [SubmissionOrderByInput!]! = [], take: Int, skip: Int! = 0): [Submission!]
  submission(where: SubmissionWhereUniqueInput!): Submission
  submissionsCount(where: SubmissionWhereInput! = {}): Int
  events(where: EventWhereInput! = {}, orderBy: [EventOrderByInput!]! = [], take: Int, skip: Int! = 0): [Event!]
  event(where: EventWhereUniqueInput!): Event
  eventsCount(where: EventWhereInput! = {}): Int
  roles(where: RoleWhereInput! = {}, orderBy: [RoleOrderByInput!]! = [], take: Int, skip: Int! = 0): [Role!]
  role(where: RoleWhereUniqueInput!): Role
  rolesCount(where: RoleWhereInput! = {}): Int
  runs(where: RunWhereInput! = {}, orderBy: [RunOrderByInput!]! = [], take: Int, skip: Int! = 0): [Run!]
  run(where: RunWhereUniqueInput!): Run
  runsCount(where: RunWhereInput! = {}): Int
  tickets(where: TicketWhereInput! = {}, orderBy: [TicketOrderByInput!]! = [], take: Int, skip: Int! = 0): [Ticket!]
  ticket(where: TicketWhereUniqueInput!): Ticket
  ticketsCount(where: TicketWhereInput! = {}): Int
  volunteers(where: VolunteerWhereInput! = {}, orderBy: [VolunteerOrderByInput!]! = [], take: Int, skip: Int! = 0): [Volunteer!]
  volunteer(where: VolunteerWhereUniqueInput!): Volunteer
  volunteersCount(where: VolunteerWhereInput! = {}): Int
  shirtOrders(where: ShirtOrderWhereInput! = {}, orderBy: [ShirtOrderOrderByInput!]! = [], take: Int, skip: Int! = 0): [ShirtOrder!]
  shirtOrder(where: ShirtOrderWhereUniqueInput!): ShirtOrder
  shirtOrdersCount(where: ShirtOrderWhereInput! = {}): Int
  incentives(where: IncentiveWhereInput! = {}, orderBy: [IncentiveOrderByInput!]! = [], take: Int, skip: Int! = 0): [Incentive!]
  incentive(where: IncentiveWhereUniqueInput!): Incentive
  incentivesCount(where: IncentiveWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
  validateUserPasswordResetToken(email: String!, token: String!): ValidateUserPasswordResetTokenResult
  accountVerification(where: VerificationWhereUniqueInput!): Verification
}

union AuthenticatedItem = User

type ValidateUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
