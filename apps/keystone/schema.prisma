// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

model Post {
  id            String        @id @default(cuid())
  title         String        @default("")
  slug          String        @unique @default("")
  author        User[]        @relation("Post_author")
  published     Boolean       @default(false)
  publishedDate DateTime?
  editedDate    DateTime?
  role          PostRoleType?
  content       Json          @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  intro         String        @default("")
  event         Event?        @relation("Post_event", fields: [eventId], references: [id])
  eventId       String?       @map("event")

  @@index([eventId])
}

model User {
  id                      String         @id @default(cuid())
  name                    String         @default("")
  username                String         @unique @default("")
  email                   String         @unique @default("")
  password                String
  accountCreated          DateTime?      @default(now())
  dateOfBirth             DateTime?
  pronouns                String         @default("")
  submissions             Submission[]   @relation("Submission_runner")
  roles                   Role[]         @relation("Role_users")
  runs                    Run[]          @relation("Run_runners")
  verified                Boolean        @default(false)
  state                   UserStateType? @default(none)
  sentVerification        DateTime?      @default(now())
  discord                 String         @default("")
  twitter                 String         @default("")
  twitch                  String         @default("")
  tickets                 Ticket[]       @relation("Ticket_user")
  volunteer               Volunteer[]    @relation("Volunteer_volunteer")
  shirts                  ShirtOrder[]   @relation("ShirtOrder_user")
  passwordResetToken      String?
  passwordResetIssuedAt   DateTime?
  passwordResetRedeemedAt DateTime?
  from_Post_author        Post[]         @relation("Post_author")
}

model Submission {
  id                          String                   @id @default(cuid())
  runner                      User?                    @relation("Submission_runner", fields: [runnerId], references: [id])
  runnerId                    String?                  @map("runner")
  created                     DateTime?                @default(now())
  game                        String                   @default("")
  category                    String                   @default("")
  platform                    String                   @default("")
  estimate                    String                   @default("")
  ageRating                   SubmissionAgeRatingType? @default(m_or_lower)
  donationIncentive           String                   @default("")
  specialReqs                 String                   @default("")
  availability                Json?                    @map("availability_json")
  race                        SubmissionRaceType?      @default(no)
  racer                       String                   @default("")
  coop                        Boolean                  @default(false)
  video                       String                   @default("")
  status                      SubmissionStatusType?    @default(submitted)
  event                       Event?                   @relation("Submission_event", fields: [eventId], references: [id])
  eventId                     String?                  @map("event")
  willingBackup               Boolean                  @default(false)
  from_Run_originalSubmission Run[]                    @relation("Run_originalSubmission")

  @@index([runnerId])
  @@index([eventId])
}

model Event {
  id                            String       @id @default(cuid())
  name                          String       @default("")
  shortname                     String       @unique @default("")
  published                     Boolean      @default(false)
  acceptingSubmissions          Boolean      @default(false)
  acceptingTickets              Boolean      @default(false)
  scheduleReleased              Boolean      @default(false)
  acceptingVolunteers           Boolean      @default(false)
  acceptingBackups              Boolean      @default(false)
  acceptingShirts               Boolean      @default(false)
  eventTimezone                 String       @default("")
  startDate                     DateTime?
  endDate                       DateTime?
  raised                        Float?
  postEventPage                 Json         @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  submissions                   Submission[] @relation("Submission_event")
  runs                          Run[]        @relation("Run_event")
  tickets                       Ticket[]     @relation("Ticket_event")
  volunteer                     Volunteer[]  @relation("Volunteer_event")
  donationIncentives            Incentive[]  @relation("Incentive_event")
  logo_filesize                 Int?
  logo_extension                String?
  logo_width                    Int?
  logo_height                   Int?
  logo_id                       String?
  darkModeLogo_filesize         Int?
  darkModeLogo_extension        String?
  darkModeLogo_width            Int?
  darkModeLogo_height           Int?
  darkModeLogo_id               String?
  heroImage_filesize            Int?
  heroImage_extension           String?
  heroImage_width               Int?
  heroImage_height              Int?
  heroImage_id                  String?
  ogImage_filesize              Int?
  ogImage_extension             String?
  ogImage_width                 Int?
  ogImage_height                Int?
  ogImage_id                    String?
  postEventBackground_filesize  Int?
  postEventBackground_extension String?
  postEventBackground_width     Int?
  postEventBackground_height    Int?
  postEventBackground_id        String?
  pressKit_filename             String?
  pressKit_filesize             Int?
  submissionInstructions        Json         @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  eventPage                     Json         @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  from_Post_event               Post[]       @relation("Post_event")
  from_Role_event               Role[]       @relation("Role_event")
}

model Role {
  id               String              @id @default(cuid())
  name             String              @default("")
  admin            Boolean             @default(false)
  canManageContent Boolean             @default(false)
  canManageUsers   Boolean             @default(false)
  runner           Boolean             @default(false)
  volunteer        Boolean             @default(false)
  users            User[]              @relation("Role_users")
  event            Event?              @relation("Role_event", fields: [eventId], references: [id])
  eventId          String?             @map("event")
  show             Boolean             @default(false)
  colour           String              @default("#ffffff")
  textColour       RoleTextColourType?

  @@index([eventId])
}

model Run {
  id                      String      @id @default(cuid())
  runners                 User[]      @relation("Run_runners")
  originalSubmission      Submission? @relation("Run_originalSubmission", fields: [originalSubmissionId], references: [id])
  originalSubmissionId    String?     @map("originalSubmission")
  game                    String      @default("")
  category                String      @default("")
  platform                String      @default("")
  estimate                String      @default("")
  finalTime               String      @default("")
  donationIncentive       String      @default("")
  race                    Boolean     @default(false)
  racer                   String      @default("")
  coop                    Boolean     @default(false)
  twitchVOD               String      @default("")
  youtubeVOD              String      @default("")
  event                   Event?      @relation("Run_event", fields: [eventId], references: [id])
  eventId                 String?     @map("event")
  donationIncentiveObject Incentive[] @relation("Incentive_run")
  scheduledTime           DateTime?

  @@index([originalSubmissionId])
  @@index([eventId])
}

model Verification {
  id      String @id @default(cuid())
  code    String @unique @default("")
  account String @default("")
}

model Ticket {
  id              String           @id @default(cuid())
  user            User?            @relation("Ticket_user", fields: [userId], references: [id])
  userId          String?          @map("user")
  event           Event?           @relation("Ticket_event", fields: [eventId], references: [id])
  eventId         String?          @map("event")
  taken           Boolean          @default(false)
  method          TicketMethodType
  ticketID        String           @unique @default("")
  paid            Boolean          @default(false)
  notes           String           @default("")
  numberOfTickets Int?
  stripeID        String           @unique @default("")
  created         DateTime?        @default(now())

  @@index([userId])
  @@index([eventId])
}

model Volunteer {
  id                           String                @id @default(cuid())
  volunteer                    User?                 @relation("Volunteer_volunteer", fields: [volunteerId], references: [id])
  volunteerId                  String?               @map("volunteer")
  jobType                      VolunteerJobTypeType?
  eventHostTime                Int?                  @default(0)
  maxDailyHostTime             Int?                  @default(0)
  dayTimes                     Json?                 @default("[]")
  specificGame                 String                @default("")
  specificRunner               String                @default("")
  additionalInfo               String                @default("")
  experience                   String                @default("")
  favMeme                      String                @default("")
  runnerManagementAvailability String                @default("")
  techAvailablity              String                @default("")
  techExperience               String                @default("")
  event                        Event?                @relation("Volunteer_event", fields: [eventId], references: [id])
  eventId                      String?               @map("event")

  @@index([volunteerId])
  @@index([eventId])
}

model ShirtOrder {
  id       String               @id @default(cuid())
  user     User?                @relation("ShirtOrder_user", fields: [userId], references: [id])
  userId   String?              @map("user")
  taken    Boolean              @default(false)
  method   ShirtOrderMethodType
  shirtID  String               @unique @default("")
  paid     Boolean              @default(false)
  notes    String               @default("")
  size     ShirtOrderSizeType
  colour   ShirtOrderColourType
  stripeID String               @unique @default("")
  created  DateTime?            @default(now())

  @@index([userId])
}

model Incentive {
  id      String  @id @default(cuid())
  run     Run?    @relation("Incentive_run", fields: [runId], references: [id])
  runId   String? @map("run")
  event   Event?  @relation("Incentive_event", fields: [eventId], references: [id])
  eventId String? @map("event")
  title   String  @default("")
  notes   String  @default("")
  type    String  @default("")
  data    Json?
  active  Boolean @default(false)

  @@index([runId])
  @@index([eventId])
}

enum PostRoleType {
  public
  runner
  staff
}

enum UserStateType {
  none
  vic
  nsw
  qld
  sa
  wa
  act
  nt
  tas
  outer
}

enum SubmissionAgeRatingType {
  m_or_lower
  ma15
  ra18
}

enum SubmissionRaceType {
  no
  solo
  only
}

enum SubmissionStatusType {
  submitted
  accepted
  backup
  rejected
}

enum RoleTextColourType {
  white
  black
}

enum TicketMethodType {
  bank
  stripe
}

enum VolunteerJobTypeType {
  host
  social
  runMgmt
  tech
}

enum ShirtOrderMethodType {
  bank
  stripe
}

enum ShirtOrderSizeType {
  xs
  s
  m
  l
  xl
  xl2
  xl3
}

enum ShirtOrderColourType {
  blue
  purple
}
